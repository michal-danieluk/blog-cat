{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nimport prism from 'remark-prism';\nexport const getList = path => {\n  const directory = join(process.cwd(), path);\n  const files = fs.readdirSync(directory);\n  return files.map(file => {\n    const fullPath = join(directory, file);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const {\n      data\n    } = matter(fileContents);\n    return _objectSpread(_objectSpread({}, data), {}, {\n      category: data.category,\n      slug: file.replace('.md', ''),\n      createdAt: data.date ? Number(new Date(data.date)) : null\n    });\n  });\n};\nexport const getFileBySlug = async (path, slug) => {\n  const directory = join(process.cwd(), path);\n  const fullPath = join(directory, `${slug}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const {\n    data,\n    content: markdownContent\n  } = matter(fileContents);\n  let content = '';\n\n  if (markdownContent) {\n    content = await remark().use(html).use(prism).process(markdownContent);\n    content = content.toString();\n  }\n\n  return _objectSpread(_objectSpread({}, data), {}, {\n    content,\n    slug,\n    createdAt: data.date ? Number(new Date(data.date)) : null\n  });\n};","map":{"version":3,"sources":["/Users/michal/Desktop/development/next-blog-app/lib/markdownParser.js"],"names":["fs","join","matter","remark","html","prism","getList","path","directory","process","cwd","files","readdirSync","map","file","fullPath","fileContents","readFileSync","data","category","slug","replace","createdAt","date","Number","Date","getFileBySlug","content","markdownContent","use","toString"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU;AAC/B,QAAMC,SAAS,GAAGP,IAAI,CAACQ,OAAO,CAACC,GAAR,EAAD,EAAgBH,IAAhB,CAAtB;AACA,QAAMI,KAAK,GAAGX,EAAE,CAACY,WAAH,CAAeJ,SAAf,CAAd;AAEA,SAAOG,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AACzB,UAAMC,QAAQ,GAAGd,IAAI,CAACO,SAAD,EAAYM,IAAZ,CAArB;AACA,UAAME,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAWhB,MAAM,CAACc,YAAD,CAAvB;AAEA,2CACKE,IADL;AAEEC,MAAAA,QAAQ,EAAED,IAAI,CAACC,QAFjB;AAGEC,MAAAA,IAAI,EAAEN,IAAI,CAACO,OAAL,CAAa,KAAb,EAAoB,EAApB,CAHR;AAIEC,MAAAA,SAAS,EAAEJ,IAAI,CAACK,IAAL,GAAYC,MAAM,CAAC,IAAIC,IAAJ,CAASP,IAAI,CAACK,IAAd,CAAD,CAAlB,GAA0C;AAJvD;AAMD,GAXM,CAAP;AAYD,CAhBM;AAmBP,OAAO,MAAMG,aAAa,GAAG,OAAOnB,IAAP,EAAaa,IAAb,KAAsB;AACjD,QAAMZ,SAAS,GAAGP,IAAI,CAACQ,OAAO,CAACC,GAAR,EAAD,EAAgBH,IAAhB,CAAtB;AACA,QAAMQ,QAAQ,GAAGd,IAAI,CAACO,SAAD,EAAa,GAAEY,IAAK,KAApB,CAArB;AACA,QAAMJ,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQS,IAAAA,OAAO,EAAEC;AAAjB,MAAqC1B,MAAM,CAACc,YAAD,CAAjD;AACA,MAAIW,OAAO,GAAG,EAAd;;AACA,MAAIC,eAAJ,EAAqB;AACnBD,IAAAA,OAAO,GAAG,MAAMxB,MAAM,GAAG0B,GAAT,CAAazB,IAAb,EAAmByB,GAAnB,CAAuBxB,KAAvB,EAA8BI,OAA9B,CAAsCmB,eAAtC,CAAhB;AACAD,IAAAA,OAAO,GAAGA,OAAO,CAACG,QAAR,EAAV;AACD;;AAED,yCACKZ,IADL;AAEES,IAAAA,OAFF;AAGEP,IAAAA,IAHF;AAIEE,IAAAA,SAAS,EAAEJ,IAAI,CAACK,IAAL,GAAYC,MAAM,CAAC,IAAIC,IAAJ,CAASP,IAAI,CAACK,IAAd,CAAD,CAAlB,GAA0C;AAJvD;AAMD,CAjBM","sourcesContent":["import fs from 'fs';\nimport { join } from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nimport prism from 'remark-prism';\n\nexport const getList = (path) => {\n  const directory = join(process.cwd(), path);\n  const files = fs.readdirSync(directory);\n\n  return files.map((file) => {\n    const fullPath = join(directory, file);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const { data } = matter(fileContents);\n\n    return {\n      ...data,\n      category: data.category,\n      slug: file.replace('.md', ''),\n      createdAt: data.date ? Number(new Date(data.date)) : null\n    };\n  });\n};\n\n\nexport const getFileBySlug = async (path, slug) => {\n  const directory = join(process.cwd(), path);\n  const fullPath = join(directory, `${slug}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8');\n  const { data, content: markdownContent } = matter(fileContents);\n  let content = '';\n  if (markdownContent) {\n    content = await remark().use(html).use(prism).process(markdownContent);\n    content = content.toString();\n  }\n\n  return {\n    ...data,\n    content,\n    slug,\n    createdAt: data.date ? Number(new Date(data.date)) : null\n  };\n};\n"]},"metadata":{},"sourceType":"module"}